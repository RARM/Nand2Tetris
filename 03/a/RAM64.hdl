// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/* Rodolfo Andr√©s Rivas Matta-RAM64.hdl
 * CDA 3201C - Intro to Logic Design - Fall 2021
 * Assignment 3
 * 09/14/2021
 */

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[3..5], a=lr1, b=lr2, c=lr3, d=lr4, e=lr5, f=lr6, g=lr7, h=lr8);
    // lrX stands for Load to RAM X where "X" is a number.
    // ioX stands for Information Output X where "X" is a number.

    // Internal RAM chips.
    RAM8(in=in, load=lr8, address=address[0..2], out=io8);
    RAM8(in=in, load=lr7, address=address[0..2], out=io7);
    RAM8(in=in, load=lr6, address=address[0..2], out=io6);
    RAM8(in=in, load=lr5, address=address[0..2], out=io5);
    RAM8(in=in, load=lr4, address=address[0..2], out=io4);
    RAM8(in=in, load=lr3, address=address[0..2], out=io3);
    RAM8(in=in, load=lr2, address=address[0..2], out=io2);
    RAM8(in=in, load=lr1, address=address[0..2], out=io1);

    // Selecting output.
    Mux8Way16(a=io1, b=io2, c=io3, d=io4, e=io5, f=io6, g=io7, h=io8, sel=address[3..5], out=out);
}
